{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9f234f58-e46f-4014-b9a8-7d5b46f8dc50",
   "metadata": {},
   "source": [
    "# Mesh1d basics\n",
    "\n",
    "\n",
    "This tutorial will show how to deal with 1d meshes and how they can interact with 2d meshes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a9ccfb1-f4c4-477d-9090-02ef4b536ba5",
   "metadata": {},
   "source": [
    "At the very beginning, the necessary libraries have to be imported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec99e633-0ade-4753-83d6-ab654cea0403",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from meshkernel import Mesh1d, MeshKernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6190c4a0-c499-42d3-94c9-84128333c746",
   "metadata": {},
   "outputs": [],
   "source": [
    "node_x = np.linspace(0, 2 * np.pi, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "60f8d296-d6cd-4186-8236-98136917f415",
   "metadata": {},
   "outputs": [],
   "source": [
    "node_y = np.sin(node_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff39e136-e9e7-4efc-a3af-b955d5865341",
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_nodes = np.zeros(node_x.size * 2, np.int32)\n",
    "edge_index = 0\n",
    "for node_index in range(node_x.size - 1):\n",
    "    edge_nodes[edge_index] = node_index\n",
    "    edge_index += 1\n",
    "    edge_nodes[edge_index] = node_index + 1\n",
    "    edge_index += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0c616b30-e6b6-42c7-8e40-c9d2f8a3b9b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_mesh1d = Mesh1d(node_x, node_y, edge_nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d686e39d-0db3-4090-b472-6b7185a14ca5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "input_mesh1d.plot_edges(ax, \"b-\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "18c59552-68a1-4a36-87f7-f622c62a14d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "mk = MeshKernel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dcd0f6d6-272d-44c8-91b3-627179010077",
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh1d_set(input_mesh1d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89a81165-9b66-4012-be6e-ed9161816b48",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
